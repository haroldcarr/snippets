Initialize system with a function and intial value.

Then the system calls that function with the given value in response to calls to other system functions.

#+begin_example
    f :: a -> CmdRequest -> (a, CmdResponse)
#+end_example

from an application A to a system S.

S
 - defines CmdRequest and CmdResponse
 - at initialization: given/stores `f`
 - at initialization: stores an initial value of `a`
  - as an opaque value
  - S cannot see any `a` structure
 - calls `f` (as part of system operation)
  - passing it `a` values it previously stored (from previous calls or system initialization)
  - stores the resulting first `a` component of the return type

A
 - defines `f`
 - at initialization: passes `f` to S
 - at initialization: passes initial value of `a` to S
 - can use specific types for `a` (e.g., Data.HashMap)
 - when `f` is called it can see the internal structure (e.g., Data.HashMap) of `a`

#+begin_example
    A                              S                   S's State
      initialization
    .                              .                       .
    .                              .                       .
    .                              .                       .
    |                              |                       |
    x---------- pass f ----------->|                       |
    |                              x----- store f -------->|
    x--------------- a ----------->|                       |
    |                              x----- store a -------->|
                                   |                       |
                                   .                       .
                                   .                       .
                                   .                       .
      usage
                                   |                       |
                                   |                       |
                                   x------- get f -------->|
                                   |                       |
                                   x------- get a -------->|
                                   |                       |
    |<---- call f a CmdRequest ----|                       |
    |                              |                       |
    |-- return (a', CmdResponse) ->|                       |
    |                              |                       |
    |                              x----- store a' ------->|
    |                              |                       |
    .                              .                       .
    .                              .                       .
    .                              .                       .
    |<--- call f a' CmdRequest ----|                       |
    |                              |                       |
    |- return (a'', CmdResponse) ->|                       |
    |                              |                       |
    |                              x----- store a'' ------>|
    |                              |                       |
    .                              .                       .
    .                              .                       .
    .                              .                       .
#+end_example

Here is a solution with parameterized state.

To build and test:

#+begin_example
cd system
stack build
cd app
stack test
#+end_example

See stackoverflow question:  [[http://stackoverflow.com/questions/41950524/functions-with-types-opaque-to-a-library-but-specific-to-an-application]]
