Initialize library with a function and intial value.

Then the library calls that function with the given value in response to calls to other library functions.

#+begin_example
    f :: a -> CmdRequest -> (a, CmdResponse)
#+end_example

from an application A to a library L.

L
 - defines CmdRequest and CmdResponse
 - at initialization: given/stores `f`
 - at initialization: stores an initial value of `a`
  - as an opaque value
  - L cannot see any `a` structure
 - calls `f` (in response to some other L function being called)
  - passing it `a` values it previously stored (from previous calls or system initialization)
  - stores the resulting first `a` component of the return type

A
 - defines `f`
 - at initialization: passes `f` to L
 - at initialization: passes initial value of `a` to L
 - can use specific types for `a` (e.g., Data.HashMap)
 - calls another L function `g` that calls back to `f`
 - when `f` is called it can see the internal structure (e.g., Data.HashMap) of `a`

#+begin_example
    A                              L                   L's State
      initialization
    .                              .                       .
    .                              .                       .
    .                              .                       .
    |                              |                       |
    x---------- pass f ----------->|                       |
    |                              x----- store f -------->|
    x--------------- a ----------->|                       |
    |                              x----- store a -------->|
    |                              |                       |
    .                              .                       .
    .                              .                       .
    .                              .                       .
      usage
    x---------- call g ----------->|                       |
    |                              |                       |
    |                              x------- get f -------->|
    |                              |                       |
    |                              x------- get a -------->|
    |                              |                       |
    |<---- call f a CmdRequest ----|                       |
    |                              |                       |
    |-- return (a', CmdResponse) ->|                       |
    |                              |                       |
    |                              x----- store a' ------->|
    |                              |                       |
    |<- return CmdResponse from g -|                       |
    .                              .                       .
    .                              .                       .
    .                              .                       .
#+end_example

Here is a solution with parameterized state.

To build and test:

#+begin_example
cd library
stack build
cd app
statck test
#+end_example
